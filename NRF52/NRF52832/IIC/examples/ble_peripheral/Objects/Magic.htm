<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Magic.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Magic.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat May 13 18:28:01 2023
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; uartInit &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">CCM_AAR_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">GPIOTE_IRQHandler</a> from nrfx_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">RTC1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_twim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from nrfx_twim.o(.constdata)
 <LI><a href="#[d]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrfx_twim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">SWI2_EGU2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[16]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[33]">fputc</a> from retarget.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[32]">in_pin_handler</a> from led.o(i.in_pin_handler) referenced from led.o(i.LED_Init)
 <LI><a href="#[2f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3a]">nrfx_uart_0_irq_handler</a> from nrfx_uart.o(i.nrfx_uart_0_irq_handler) referenced from nrfx_uart.o(.constdata)
 <LI><a href="#[3b]">nrfx_uarte_0_irq_handler</a> from nrfx_uarte.o(i.nrfx_uarte_0_irq_handler) referenced from nrfx_uarte.o(.constdata)
 <LI><a href="#[38]">twi_handler</a> from oled.o(i.twi_handler) referenced from oled.o(i.twi_master_init)
 <LI><a href="#[35]">twim_evt_handler</a> from nrf_drv_twi.o(i.twim_evt_handler) referenced from nrf_drv_twi.o(i.nrf_drv_twi_init)
 <LI><a href="#[39]">uart_error_handle</a> from uart.o(i.uart_error_handle) referenced from uart.o(i.uartInit)
 <LI><a href="#[34]">uart_event_handler</a> from app_uart_fifo.o(i.uart_event_handler) referenced from app_uart_fifo.o(i.app_uart_init)
 <LI><a href="#[37]">uart_evt_handler</a> from nrf_drv_uart.o(i.uart_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[36]">uarte_evt_handler</a> from nrf_drv_uart.o(i.uarte_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[b6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[b7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[b9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[ba]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_tx
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIOTE_IRQHandler &rArr; port_event_handle &rArr; latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>LED_Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LED_Init &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OPEN_CLOSE
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>LED_OPEN_CLOSE</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led.o(i.LED_OPEN_CLOSE))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>OLED_P6x8Str</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, oled.o(i.OLED_P6x8Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OLED_P6x8Str &rArr; oled_Set_pos &rArr; oled_write_cmd &rArr; ssd1315_register_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_line
</UL>

<P><STRONG><a name="[50]"></a>OLED_P8x16Str</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, oled.o(i.OLED_P8x16Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OLED_P8x16Str &rArr; oled_Set_pos &rArr; oled_write_cmd &rArr; ssd1315_register_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_line
</UL>

<P><STRONG><a name="[d]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_twim.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; twim_irq_handler &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrfx_twim.o(.constdata)
<LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 106 bytes, Stack size 4 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmc_wait
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmc_config
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>__0printf$bare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c1]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[7a]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[57]"></a>app_error_fault_handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>

<P><STRONG><a name="[49]"></a>app_error_handler_bare</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_handle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_master_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[58]"></a>app_fifo_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[5d]"></a>app_fifo_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[5a]"></a>app_fifo_put</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[5c]"></a>app_uart_init</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, app_uart_fifo.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
</UL>

<P><STRONG><a name="[61]"></a>app_uart_put</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[65]"></a>app_util_critical_region_enter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[67]"></a>app_util_critical_region_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[66]"></a>app_util_disable_irq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[68]"></a>app_util_enable_irq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
</UL>

<P><STRONG><a name="[33]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fputc &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[32]"></a>in_pin_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led.o(i.in_pin_handler))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_toggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.LED_Init)
</UL>
<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; uartInit &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_master_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_line
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OPEN_CLOSE
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7b]"></a>nrf_drv_twi_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_twi_init &rArr; nrfx_twim_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_master_init
</UL>

<P><STRONG><a name="[5f]"></a>nrf_drv_uart_init</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[4b]"></a>nrfx_gpiote_in_event_enable</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_polarity_get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[4a]"></a>nrfx_gpiote_in_init</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_set
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[48]"></a>nrfx_gpiote_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrfx_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_gpiote_init &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_present_check
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[92]"></a>nrfx_prs_acquire</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_prs_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
</UL>

<P><STRONG><a name="[a8]"></a>nrfx_twim_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrfx_twim_enable))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_master_init
</UL>

<P><STRONG><a name="[7d]"></a>nrfx_twim_init</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, nrfx_twim.o(i.nrfx_twim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_twim_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[7f]"></a>nrfx_twim_tx</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, nrfx_twim.o(i.nrfx_twim_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_xfer
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>

<P><STRONG><a name="[96]"></a>nrfx_twim_xfer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrfx_twim.o(i.nrfx_twim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_tx
</UL>

<P><STRONG><a name="[3a]"></a>nrfx_uart_0_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrfx_uart_0_irq_handler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>nrfx_uart_init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[83]"></a>nrfx_uart_rx</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrfx_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[85]"></a>nrfx_uart_tx</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, nrfx_uart.o(i.nrfx_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[63]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[3b]"></a>nrfx_uarte_0_irq_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uarte_0_irq_handler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uarte.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>nrfx_uarte_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrfx_uarte.o(i.nrfx_uarte_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[82]"></a>nrfx_uarte_rx</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, nrfx_uarte.o(i.nrfx_uarte_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_uarte_rx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[84]"></a>nrfx_uarte_tx</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_uarte_tx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[62]"></a>nrfx_uarte_tx_in_progress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[52]"></a>nvmc_config</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52.o(i.nvmc_config))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmc_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[53]"></a>nvmc_wait</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, system_nrf52.o(i.nvmc_wait))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvmc_config
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4e]"></a>oled_Set_pos</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oled.o(i.oled_Set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = oled_Set_pos &rArr; oled_write_cmd &rArr; ssd1315_register_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P8x16Str
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P6x8Str
</UL>

<P><STRONG><a name="[77]"></a>oled_init</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, oled.o(i.oled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = oled_init &rArr; oled_screen_fill &rArr; oled_write_data &rArr; ssd1315_register_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_cmd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_screen_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>oled_screen_fill</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, oled.o(i.oled_screen_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = oled_screen_fill &rArr; oled_write_data &rArr; ssd1315_register_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[78]"></a>oled_show_line</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, oled.o(i.oled_show_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = oled_show_line &rArr; OLED_P8x16Str &rArr; oled_Set_pos &rArr; oled_write_cmd &rArr; ssd1315_register_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P8x16Str
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P6x8Str
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>oled_write_cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oled.o(i.oled_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = oled_write_cmd &rArr; ssd1315_register_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1315_register_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_screen_fill
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_Set_pos
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[4f]"></a>oled_write_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oled.o(i.oled_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = oled_write_data &rArr; ssd1315_register_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1315_register_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_screen_fill
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P8x16Str
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P6x8Str
</UL>

<P><STRONG><a name="[a3]"></a>ssd1315_register_write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, oled.o(i.ssd1315_register_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ssd1315_register_write &rArr; nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_cmd
</UL>

<P><STRONG><a name="[38]"></a>twi_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oled.o(i.twi_handler))
<BR>[Address Reference Count : 1]<UL><LI> oled.o(i.twi_master_init)
</UL>
<P><STRONG><a name="[76]"></a>twi_master_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, oled.o(i.twi_master_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = twi_master_init &rArr; nrf_drv_twi_init &rArr; nrfx_twim_init &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_enable
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>uartInit</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, uart.o(i.uartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = uartInit &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>uart_error_handle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(i.uart_error_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_error_handle &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.uartInit)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[79]"></a>nrf_delay_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led.o(i.nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[6f]"></a>nrf_gpio_pin_toggle</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led.o(i.nrf_gpio_pin_toggle))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_pin_handler
</UL>

<P><STRONG><a name="[7e]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, oled.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nrf_drv_twi_tx &rArr; nrfx_twim_tx &rArr; nrfx_twim_xfer &rArr; twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1315_register_write
</UL>

<P><STRONG><a name="[37]"></a>uart_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.uart_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[36]"></a>uarte_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.uarte_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uarte_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[91]"></a>channel_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[8d]"></a>channel_port_alloc</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, nrfx_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[89]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[74]"></a>latch_pending_read_and_check</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.latch_pending_read_and_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[a5]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[8e]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[8b]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[44]"></a>nrf_gpio_latches_read_and_clear</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpio_latches_read_and_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_latches_read_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latch_pending_read_and_check
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>nrf_gpio_pin_present_check</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_present_check))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[43]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[42]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>pin_configured_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.pin_configured_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pin_configured_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[88]"></a>pin_in_use_by_port</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[8c]"></a>pin_in_use_by_te</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[45]"></a>port_event_handle</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.port_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = port_event_handle &rArr; latch_pending_read_and_check &rArr; nrf_gpio_latches_read_and_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_polarity_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_handler_pin_get
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;latch_pending_read_and_check
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>port_handler_pin_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.port_handler_pin_get))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
</UL>

<P><STRONG><a name="[8a]"></a>port_handler_polarity_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.port_handler_polarity_get))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_event_handle
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[69]"></a>apply_config</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nrfx_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[70]"></a>interrupts_enable</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nrfx_uart.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interrupts_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[86]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[6b]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[6a]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[9a]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
</UL>

<P><STRONG><a name="[71]"></a>nrf_uart_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[af]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[9b]"></a>rx_byte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrfx_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[b0]"></a>rx_done_event</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, nrfx_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[99]"></a>rx_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrfx_uart.o(i.rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[9d]"></a>tx_blocking</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, nrfx_uart.o(i.tx_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[9c]"></a>tx_byte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
</UL>

<P><STRONG><a name="[b1]"></a>tx_done_event</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrfx_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[98]"></a>uart_irq_handler</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, nrfx_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_0_irq_handler
</UL>

<P><STRONG><a name="[6c]"></a>apply_config</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nrfx_uarte.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[72]"></a>interrupts_enable</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, nrfx_uarte.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interrupts_enable &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[87]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[6e]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[6d]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[a0]"></a>nrf_uarte_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[73]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[9f]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
</UL>

<P><STRONG><a name="[b2]"></a>rx_done_event</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, nrfx_uarte.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[b3]"></a>tx_done_event</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrfx_uarte.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[9e]"></a>uarte_irq_handler</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, nrfx_uarte.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_0_irq_handler
</UL>

<P><STRONG><a name="[93]"></a>prs_box_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[ac]"></a>_NRFX_IRQ_PENDING_CLEAR</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_twim.o(i._NRFX_IRQ_PENDING_CLEAR))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[94]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_twim.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_init
</UL>

<P><STRONG><a name="[a9]"></a>nrf_twim_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrf_twim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[aa]"></a>nrf_twim_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_twim.o(i.nrf_twim_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_twim_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[ad]"></a>nrfx_is_in_ram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_twim.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[ae]"></a>twi_process_error</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_twim.o(i.twi_process_error))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[51]"></a>twim_irq_handler</STRONG> (Thumb, 426 bytes, Stack size 64 bytes, nrfx_twim.o(i.twim_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = twim_irq_handler &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_completeness_check
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_clear
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_NRFX_IRQ_PENDING_CLEAR
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>twim_xfer</STRONG> (Thumb, 654 bytes, Stack size 40 bytes, nrfx_twim.o(i.twim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = twim_xfer &rArr; xfer_completeness_check
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer_completeness_check
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_clear
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_twim_xfer
</UL>

<P><STRONG><a name="[ab]"></a>xfer_completeness_check</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, nrfx_twim.o(i.xfer_completeness_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xfer_completeness_check
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_irq_handler
</UL>

<P><STRONG><a name="[a6]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[a7]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrfx_coredep_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[7c]"></a>twi_clear_bus</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[35]"></a>twim_evt_handler</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twim_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twim_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(i.nrf_drv_twi_init)
</UL>
<P><STRONG><a name="[60]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_uart_fifo.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_uart_rx &rArr; nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[64]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_uart_fifo.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[34]"></a>uart_event_handler</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, app_uart_fifo.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[59]"></a>fifo_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[5b]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[56]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
